/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.26
 */
import {
  z as zod
} from 'zod';

/**
 * Update an existing pet by Id.
 * @summary Update an existing pet.
 */
export const updatePetBody = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})

export const updatePetResponse = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})


/**
 * Add a new pet to the store.
 * @summary Add a new pet to the store.
 */
export const addPetBody = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})

export const addPetResponse = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})


/**
 * Multiple status values can be provided with comma separated strings.
 * @summary Finds Pets by status.
 */
export const findPetsByStatusQueryStatusDefault = "available";

export const findPetsByStatusQueryParams = zod.object({
  "status": zod.enum(['available', 'pending', 'sold']).default(findPetsByStatusQueryStatusDefault).describe('Status values that need to be considered for filter')
})

export const findPetsByStatusResponseItem = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})
export const findPetsByStatusResponse = zod.array(findPetsByStatusResponseItem)


/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags.
 */
export const findPetsByTagsQueryParams = zod.object({
  "tags": zod.array(zod.string()).optional().describe('Tags to filter by')
})

export const findPetsByTagsResponseItem = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})
export const findPetsByTagsResponse = zod.array(findPetsByTagsResponseItem)


/**
 * Returns a single pet.
 * @summary Find pet by ID.
 */
export const getPetByIdParams = zod.object({
  "petId": zod.number().describe('ID of pet to return')
})

export const getPetByIdResponse = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})


/**
 * Updates a pet resource based on the form data.
 * @summary Updates a pet in the store with form data.
 */
export const updatePetWithFormParams = zod.object({
  "petId": zod.number().describe('ID of pet that needs to be updated')
})

export const updatePetWithFormQueryParams = zod.object({
  "name": zod.string().optional().describe('Name of pet that needs to be updated'),
  "status": zod.string().optional().describe('Status of pet that needs to be updated')
})

export const updatePetWithFormResponse = zod.object({
  "id": zod.number().optional(),
  "name": zod.string(),
  "category": zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
}).optional(),
  "photoUrls": zod.array(zod.string()),
  "tags": zod.array(zod.object({
  "id": zod.number().optional(),
  "name": zod.string().optional()
})).optional(),
  "status": zod.enum(['available', 'pending', 'sold']).optional().describe('pet status in the store')
})


/**
 * Delete a pet.
 * @summary Deletes a pet.
 */
export const deletePetParams = zod.object({
  "petId": zod.number().describe('Pet id to delete')
})

export const deletePetHeader = zod.object({
  "api_key": zod.string().optional()
})


/**
 * Upload image of the pet.
 * @summary Uploads an image.
 */
export const uploadFileParams = zod.object({
  "petId": zod.number().describe('ID of pet to update')
})

export const uploadFileQueryParams = zod.object({
  "additionalMetadata": zod.string().optional().describe('Additional Metadata')
})

export const uploadFileResponse = zod.object({
  "code": zod.number().optional(),
  "type": zod.string().optional(),
  "message": zod.string().optional()
})


/**
 * Returns a map of status codes to quantities.
 * @summary Returns pet inventories by status.
 */
export const getInventoryResponse = zod.record(zod.string(), zod.number())


/**
 * Place a new order in the store.
 * @summary Place an order for a pet.
 */
export const placeOrderBody = zod.object({
  "id": zod.number().optional(),
  "petId": zod.number().optional(),
  "quantity": zod.number().optional(),
  "shipDate": zod.string().datetime({}).optional(),
  "status": zod.enum(['placed', 'approved', 'delivered']).optional().describe('Order Status'),
  "complete": zod.boolean().optional()
})

export const placeOrderResponse = zod.object({
  "id": zod.number().optional(),
  "petId": zod.number().optional(),
  "quantity": zod.number().optional(),
  "shipDate": zod.string().datetime({}).optional(),
  "status": zod.enum(['placed', 'approved', 'delivered']).optional().describe('Order Status'),
  "complete": zod.boolean().optional()
})


/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID.
 */
export const getOrderByIdParams = zod.object({
  "orderId": zod.number().describe('ID of order that needs to be fetched')
})

export const getOrderByIdResponse = zod.object({
  "id": zod.number().optional(),
  "petId": zod.number().optional(),
  "quantity": zod.number().optional(),
  "shipDate": zod.string().datetime({}).optional(),
  "status": zod.enum(['placed', 'approved', 'delivered']).optional().describe('Order Status'),
  "complete": zod.boolean().optional()
})


/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 * @summary Delete purchase order by identifier.
 */
export const deleteOrderParams = zod.object({
  "orderId": zod.number().describe('ID of the order that needs to be deleted')
})


/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
export const createUserBody = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})

export const createUserResponse = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})


/**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
export const createUsersWithListInputBodyItem = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})
export const createUsersWithListInputBody = zod.array(createUsersWithListInputBodyItem)

export const createUsersWithListInputResponse = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})


/**
 * Log into the system.
 * @summary Logs user into the system.
 */
export const loginUserQueryParams = zod.object({
  "username": zod.string().optional().describe('The user name for login'),
  "password": zod.string().optional().describe('The password for login in clear text')
})

export const loginUserResponse = zod.string()


/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
export const getUserByNameParams = zod.object({
  "username": zod.string().describe('The name that needs to be fetched. Use user1 for testing')
})

export const getUserByNameResponse = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})


/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
export const updateUserParams = zod.object({
  "username": zod.string().describe('name that need to be deleted')
})

export const updateUserBody = zod.object({
  "id": zod.number().optional(),
  "username": zod.string().optional(),
  "firstName": zod.string().optional(),
  "lastName": zod.string().optional(),
  "email": zod.string().optional(),
  "password": zod.string().optional(),
  "phone": zod.string().optional(),
  "userStatus": zod.number().optional().describe('User Status')
})


/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
export const deleteUserParams = zod.object({
  "username": zod.string().describe('The name that needs to be deleted')
})
